openapi: 3.0.1
info:
  title: Swagger Esidom
  description: ''
  contact:
    email: skavalt@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: 'http://domotique.3utilities.com:3000'

paths:
  /auth:
    post:
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
    delete:
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        204:
          description: No content


  /device:
    get:
      tags:
      - Device
      summary: Get list of device
      operationId: getDevices
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'
        401:
          description: Unauthorized
          content: {}
    post:
      tags:
      - Device
      summary: Add device
      operationId: addDevice
      responses:
        200:
          description: OK (new device send via WS with event 'device_created'. Device schema is below)
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  name: 
                    type: string
                  model:
                    type: string
                  entities:
                    type: array
                    items:
                      type: string
                  automations:
                    type: array
                    items:
                      type: string    
        401:
          description: Unauthorized
          content: {}
  /device/{deviceId}:
    get:
      tags:
      - Device
      summary: Find device by ID
      description: Returns a single device
      operationId: getDeviceById
      parameters:
      - name: deviceId
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Not found
          content: {}
    put:
      tags:
      - Device
      summary: Modify device by ID
      operationId: modifyDeviceById
      parameters:
      - name: deviceId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:          
                  type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        400:
          description: Invalid ID supplied
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not found
          content: {}
    patch:
      tags:
      - Device
      summary: Enable/Disable device by ID
      operationId: activateDeviceById
      parameters:
      - name: deviceId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                activated:          
                  type: string
      responses:
        204:
          description: OK
          content: {}
        400:
          description: Invalid ID supplied
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not found
          content: {}
  /entity:
    get:
      tags:
      - Entity
      summary: Get list of entity
      operationId: getEntities
      parameters:
        - in: query
          name: type
          required: false
          schema:
            type: string
          description: A device type used to filter the result ('light', 'sensor', ...)
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Entity'
        401:
          description: Unauthorized
          content: {}
  /entity/types:
    get:
      tags:
      - Entity
      summary: Get a list of all entities types currently used in HA
      operationId: getEntitiesTypes
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: 
                  type: string
                default: ["person","sun", "group", "zone","binary_sensor","switch","sensor","automation","weather","media_player","light","zwave", "persistent_notification" ]
  /entity/{entityId}:
    get:
      tags:
      - Entity
      summary: Get entity from ID
      operationId: getEntityById
      parameters:
      - name: entityId
        in: path
        description: ID of entity to return
        required: true
        schema:
          type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
        401:
          description: Unauthorized
          content: {}
        404:
          description: Not found
          content: {}
    patch:
      tags:
      - Entity
      summary: Enable/Disable entity by ID
      operationId: activateEntityById
      parameters:
      - name: entityId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                enable:
                  type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
        400:
          description: Invalid ID supplied
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not found
          content: {}
    put:
      tags:
      - Entity
      summary: Modify entity by ID
      operationId: modifyEntityById
      parameters:
      - name: entityId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                service:
                  type: string
                  default: light.turn_on
                serviceData:
                  type: object
                  default: { brightness: 35 }
      responses:
        200:
          description: OK (TODO check response)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
        400:
          description: Invalid ID supplied
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not found
          content: {}
  
  /automation:
    get:
      tags:
      - Automation
      summary: Get list of automation
      operationId: getAutomations
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AutomationPreview'
        401:
          description: Unauthorized
          content: {}
    post:
      tags:
      - Automation
      summary: Add a automation
      operationId: addAutomations
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Automation'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Automation'
        401:
          description: Unauthorized
          content: {}
  /automation/{automationId}:
    get:
      tags:
      - Automation
      summary: Get Automation by ID
      operationId: getAutomationById
      parameters:
      - name: automationId
        in: path
        description: ID of automation to return
        required: true
        schema:
          type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Automation'
        401:
          description: Unauthorized
          content: {}
        404:
          description: Not found
          content: {}
    put:
      tags:
      - Automation
      summary: Modify automation by ID
      operationId: modifyAutomationById
      parameters:
      - name: automationId
        in: path
        description: ID of automation to modify
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Automation'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Automation'
        400:
          description: Invalid ID supplied
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not found
          content: {}
    patch:
      tags:
      - Automation
      summary: Enable/Disable automation by ID
      description: Enable/Disable automation by ID
      parameters:
      - name: automationId
        in: path
        description: ID of automation to enable/disable
        required: true
        schema:
          type: string
          example: 'automation.allumer_lampes'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: string
                  example: 'on'
      responses:
        200:
          description: OK 
    post:
      tags:
      - Automation
      summary: Trigger automation by id
      description: Trigger automation by id
      parameters:
      - name: automationId
      in: path
      required: true
      schema:
        type: string
        example: 'automation.allumer_lampes'
      responses:
        200:
          description: OK
    delete:
      tags:
      - Automation
      summary: Delete automation by ID
      description: Delete an automation by id
      operationId: deleteAutomationById
      parameters:
      - name: automationId
        in: path
        description: ID of automation to delete
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
        400:
          description: Invalid ID supplied
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not found
          content: {}
  /room:
    get:
      tags:
      - Room
      summary: Get list of room
      operationId: getRooms
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Room'
        401:
          description: Unauthorized
          content: {}
    post:
      tags:
      - Room
      summary: Create a room
      operationId: addRoom
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
              
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not found
          content: {}
  /room/{roomId}:
    get:
      tags:
      - Room
      summary: Get room from Id
      operationId: getRoomById
      parameters:
      - name: roomId
        in: path
        description: ID of room to return
        required: true
        schema:
          type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        401:
          description: Unauthorized
          content: {}
        404:
          description: Not found
          content: {}
    put:
      tags:
      - Room
      summary: Update room from Id
      operationId: updateRoomById
      parameters:
      - name: roomId
        in: path
        description: ID of room to update
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                room_id:
                  type: string
                name:
                  type: string
                devices:
                  type: array
                  items:
                    $ref: '#/components/schemas/Device'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not found
          content: {}
    delete:
      tags:
      - Room
      summary: Delete room by ID
      operationId: deleteRoomById
      parameters:
      - name: roomId
        in: path
        description: ID of room to delete
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
        400:
          description: Invalid ID supplied
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not found
          content: {}
  /group:
    get:
      tags:
      - Group
      summary: Get list of group
      operationId: getGroups
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
        401:
          description: Unauthorized
          content: {}
    post:
      tags:
      - Group
      summary: Create a group
      operationId: addGroup
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not found
          content: {}
  /group/{groupId}:
    get:
      tags:
      - Group
      summary: Get group from Id
      operationId: getGroupById
      parameters:
      - name: groupId
        in: path
        description: ID of group to return
        required: true
        schema:
          type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        401:
          description: Unauthorized
          content: {}
        404:
          description: Not found
          content: {}
    put:
      tags:
      - Group
      summary: Update group from Id
      operationId: updateGroupById
      parameters:
      - name: groupId
        in: path
        description: ID of group to update
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not found
          content: {}
    delete:
      tags:
      - Group
      summary: Delete group by ID
      operationId: deleteGroupById
      parameters:
      - name: roomId
        in: path
        description: ID of group to delete
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
        400:
          description: Invalid ID supplied
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not found
          content: {}
  /user:
    get:
      tags:
      - User
      summary: Get list of user
      operationId: getUsers
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        401:
          description: Unauthorized
          content: {}
    post:
      tags:
      - User
      summary: Create an user
      operationId: addUser
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not found
          content: {}
  /user/{userId}:
    get:
      tags:
      - User
      summary: Get user from Id
      operationId: getUserById
      parameters:
      - name: userId
        in: path
        description: ID of user to return
        required: true
        schema:
          type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: Unauthorized
          content: {}
        404:
          description: Not found
          content: {}
    put:
      tags:
      - User
      summary: Update user from Id
      operationId: updateUserById
      parameters:
      - name: userId
        in: path
        description: ID of user to update
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not found
          content: {}
    delete:
      tags:
      - User
      summary: Delete user by ID
      operationId: deleteUserById
      parameters:
      - name: userId
        in: path
        description: ID of user to delete
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
        400:
          description: Invalid ID supplied
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not found
          content: {}
  
  /manual/{ean}:
    get:
      tags:
      - Manual
      summary: Get manual from EAN product
      parameters:
      - name: ean
        in: path
        description: ean of product
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  result:
                    type: string
              
        400:
          description: Invalid EAN supplied
          content: {}
        404:
          description: Not found
          content: {}

  /service:
    get:
      tags: 
      - Service
      summary: Get available services to control devices
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'
components:
  schemas:
    Device:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        model:
          type: string
        nameByUser:
          type: string
          nullable: true
        disableBy:
          type: string
          nullable: true
        areaId:
          type: string
          nullable: true
        entities:
          type: array
          items:
            $ref: '#/components/schemas/Entity'
        automations:
          type: array
          items:
            $ref: '#/components/schemas/Automation'
    Entity:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
        state:
          type: string
        attributes:
          type: array
          items:
            type: object
    User:
      type: object
      properties:
        user_id:
          type: string
        username:
          type: string
        admin:
          type: boolean
        devices:
          type: array
          items:
            $ref: '#/components/schemas/Device'
    Room:
      type: object
      properties:
        room_id:
          type: string
        name:
          type: string
        devices:
          type: array
          items:
            $ref: '#/components/schemas/Device'
        automation:
          type: array
          items:
            $ref: '#/components/schemas/Automation'
    Group:
      type: object
      properties:
        group_id:
          type: string
        name:
          type: string
        devices:
          type: array
          items:
            $ref: '#/components/schemas/Device'
    Automation:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        state:
          type: string
        trigger:
          type: array
          items:
            type: object
        condition:
          type: array
          items:
            type: object
        action:
          type: array
          items:
            type: object
        mode:
          type: string
    AutomationPreview:
      type: object
      properties:
        id:
          type: string
        name: 
          type: string
        state:
          type: string
    Service:
      type: object
      properties:
        name:
          type: string
          example: 'light.turn_on'
        fields:
          type: array
          items: 
            type: string
            example: 'entity_id'   

openapi: 3.0.1
info:
  title: Swagger Esidom
  description: ''
  contact:
    email: skavalt@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: 'http://domotique.3utilities.com:3000'

paths:
  /auth:
    get:
      tags:
        - Auth
      responses:
        200:
          # description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        401:
          description: Fail to authenticate to HA
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /automation:
    get:
      tags:
      - Automation
      summary: Get the automations list
      operationId: getAutomations
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AutomationPreview'
        401:
          description: Unauthorized
          content: {}
    post:
      tags:
      - Automation
      summary: Add a automation
      operationId: addAutomations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Automation'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    nullable: true
                  result:
                    type: string
                    nullable: true
        401:
          description: Unauthorized
          content: {}
    patch:
      tags:
      - Automation
      summary: Update an automation
      operationId: updateAutomationById
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Automation'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    default: Ok

        400:
          description: Error
          content: 
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        401:
          description: Unauthorized
          content: {}
  /automation/{id}:
    get:
      tags:
      - Automation
      summary: Get Automation by ID
      operationId: getAutomationById
      parameters:
      - name: id
        in: path
        description: ID of automation to return
        required: true
        schema:
          type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Automation'
        401:
          description: Unauthorized
          content: {}
        404:
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

    
    patch:
      tags:
      - Automation
      summary: toggle automation by ID
      description: toggle automation by ID
      parameters:
      - name: id
        in: path
        description: ID of automation to toggle
        required: true
        schema:
          type: string
          example: 'automation.allumer_lampes'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                state:
                  type: string
                  example: 'on | off'
      responses:
        200:
          description: OK 
    post:
      tags:
      - Automation
      summary: Trigger automation by id
      description: Trigger automation by id
      parameters:
      - name: automationId
        in: path
        required: true
        schema:
          type: string
          example: 'automation.allumer_lampes'
      responses:
        200:
          description: OK
    delete:
      tags:
      - Automation
      summary: Delete automation by ID
      description: Delete an automation by id
      operationId: deleteAutomationById
      parameters:
      - name: automationId
        in: path
        description: ID of automation to delete
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
        400:
          description: Invalid ID supplied
          content: {}
        401:
          description: Unauthorized
          content: {}
  
  /device:
    get:
      tags:
      - Device
      summary: Get list of device
      operationId: getDevices
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'
        401:
          description: Unauthorized
          content: {}
    post:
      tags:
      - Device
      summary: Add device
      operationId: addDevice
      responses:
        200:
          description: OK (new device send via WS with event 'device_created'. Device schema is below)
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                      '[protocol: string]':
                        type: object
                        properties:
                          status:
                            type: string
                          error:
                            type: string
                            nullable: true
        401:
          description: Unauthorized
          content: {}
  /device/{deviceId}:
    get:
      tags:
      - Device
      summary: Find device by ID
      description: Returns a single device
      operationId: getDeviceById
      parameters:
      - name: deviceId
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        404:
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    # put:
    #   tags:
    #   - Device
    #   summary: Modify device by ID
    #   operationId: modifyDeviceById
    #   parameters:
    #   - name: deviceId
    #     in: path
    #     required: true
    #     schema:
    #       type: string
    #   requestBody:
    #     required: true
    #     content:
    #       application/json:
    #         schema:
    #           type: object
    #           properties:
    #             name:          
    #               type: string
    #   responses:
    #     200:
    #       description: OK
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/Device'
    #     400:
    #       description: Invalid ID supplied
    #       content: {}
    #     401:
    #       description: Unauthorized
    #       content: {}
    #     403:
    #       description: Forbidden
    #       content: {}
    #     404:
    #       description: Not found
    #       content: {}
    # patch:
    #   tags:
    #   - Device
    #   summary: Enable/Disable device by ID
    #   operationId: activateDeviceById
    #   parameters:
    #   - name: deviceId
    #     in: path
    #     required: true
    #     schema:
    #       type: string
    #   requestBody:
    #     required: true
    #     content:
    #       application/json:
    #         schema:
    #           type: object
    #           properties:
    #             activated:          
    #               type: string
    #   responses:
    #     204:
    #       description: OK
    #       content: {}
    #     400:
    #       description: Invalid ID supplied
    #       content: {}
    #     401:
    #       description: Unauthorized
    #       content: {}
    #     403:
    #       description: Forbidden
    #       content: {}
    #     404:
    #       description: Not found
    #       content: {}
  /entity:
    get:
      tags:
      - Entity
      summary: Get list of entity
      operationId: getEntities
      parameters:
        - in: query
          name: type
          required: false
          schema:
            type: string
          description: Filter by type
          example: 'light | sensor | automation'
        - in: query
          name: "userId"
          required: false
          schema:
            type: string
          description: Filter by user
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Entity'
        401:
          description: Unauthorized
        404:
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /entity/types:
    get:
      tags:
      - Entity
      summary: Get a list of entities types currently used in HA
      operationId: getEntitiesTypes
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: 
                  type: string
                default: ["sun", "group", "binary_sensor","switch","sensor","automation","light"]
  /entity/{entityId}:
    get:
      tags:
      - Entity
      summary: Get entity by ID
      operationId: getEntityById
      parameters:
      - name: id
        in: path
        description: ID of entity to return
        required: true
        schema:
          type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
        401:
          description: Unauthorized
        404:
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    patch:
      tags:
      - Entity
      summary: Enable/Disable entity by ID
      operationId: activateEntityById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                enable:
                  type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
        400:
          description: Invalid ID supplied
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    put:
      tags:
      - Entity
      summary: Modify entity by ID
      operationId: modifyEntityById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                service:
                  type: string
                  default: light.turn_on
                serviceData:
                  type: object
                  default: { brightness: 35 }
      responses:
        200:
          description: OK (TODO check response)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
        400:
          description: Invalid ID supplied
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not found
          content: {}
  /entity/update/:id:
    patch:
      tags:
      - Entity
      summary: Update entity name
      operationId: updateEntityById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
        401:
          description: Unauthorized
          content: {}
        404:
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
## GROUP #####################################################################
  /group:
    get:
      tags:
      - Group
      summary: Get groups
      operationId: getGroups
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
        401:
          description: Unauthorized
          content: {}
    post:
      tags:
      - Group
      summary: Create a group
      operationId: addGroup
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                entities:
                  type: array
                  items:
                    $ref: '#/components/schemas/Entity'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        401:
          description: Unauthorized
        400:
          description: Missing parameter
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /group/{groupId}:
    get:
      tags:
      - Group
      summary: Get group by Id
      operationId: getGroupById
      parameters:
      - name: groupId
        in: path
        description: ID of group to return
        required: true
        schema:
          type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        401:
          description: Unauthorized
        400:
          description: Missing parameter
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        404:
          description: No such id
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    put:
      tags:
      - Group
      summary: Update group by Id
      operationId: updateGroupById
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
              required: true
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    default: 'OK'
        401:
          description: Unauthorized
          content: {}
        400:
          description: Missing parameter
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    delete:
      tags:
      - Group
      summary: Delete group by ID
      operationId: deleteGroupById
      parameters:
      - name: groupId
        in: path
        description: ID of group to delete
        required: true
        schema:
          type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    default: 'OK'
        401:
          description: Unauthorized
          content: {}
        400:
          description: Missing parameter
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        404:
          description: No such id
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

## HEALTH ################################################################################
  /health:
    get:
      tags:
      - Health
      summary: Get server health
      operationId: getHealth
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  healthy:
                    type: boolean
                    default: true
## ROOM ################################################################################
  /room:
    get:
      tags:
      - Room
      summary: Get list of room
      operationId: getRooms
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Room'
        401:
          description: Unauthorized
    post:
      tags:
      - Room
      summary: Create a room
      operationId: addRoom
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                devices:
                  type: array
                  items:
                    $ref: '#/components/schemas/Device'
              
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        401:
          description: Unauthorized
          content: {}
        
  /room/{roomId}:
    get:
      tags:
      - Room
      summary: Get room by Id
      operationId: getRoomById
      parameters:
      - name: areaId
        in: path
        description: ID of room to return
        required: true
        schema:
          type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
        401:
          description: Unauthorized
          content: {}
        404:
          description: No such id
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    put:
      tags:
      - Room
      summary: Update room by Id
      operationId: updateRoomById
      parameters:
      - name: roomId
        in: path
        description: ID of room to update
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Room'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    default: 'OK'
        401:
          description: Unauthorized
        400:
          description: Missing parameter
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        404:
          description: Not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    delete:
      tags:
      - Room
      summary: Delete room by ID
      operationId: deleteRoomById
      parameters:
      - name: roomId
        in: path
        description: ID of room to delete
        required: true
        schema:
          type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    default: Room successfully deleted
        400:
          description: Missing parameter
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        401:
          description: Unauthorized

# SERVICE #######################################################################################
  /service:
    get:
      tags:
      - Service
      summary: Get the list of available services on entities
      operationId: getServices
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Service'

# USER #######################################################################################
  /user:
    get:
      tags:
      - User
      summary: Get list of user
      operationId: getUsers
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        401:
          description: Unauthorized
          content: {}
    post:
      tags:
      - User
      summary: Create an user
      operationId: addUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: 
                    string
                admin:
                  type:
                    boolean
                entities:
                  type: array
                  nullable: true
                  items:
                    type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: Unauthorized
        400:
          description: Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /user/{userId}:
    get:
      tags:
      - User
      summary: Get user by Id
      operationId: getUserById
      parameters:
      - name: id
        in: path
        description: ID of user to return
        required: true
        schema:
          type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: Unauthorized
        400:
          description: Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    put:
      tags:
      - User
      summary: Update user by Id
      operationId: updateUserById
      parameters:
      - name: id
        in: path
        description: ID of user to update
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: 
                    string
                  nullable: true
                admin:
                  type:
                    boolean
                  nullable: true
                entities:
                  type: array
                  nullable: true
                  items:
                    type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        401:
          description: Unauthorized
          content: {}
        400:
          description: Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
    delete:
      tags:
      - User
      summary: Delete user by ID
      operationId: deleteUserById
      parameters:
      - name: userId
        in: path
        description: ID of user to delete
        required: true
        schema:
          type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    default: ok 
        401:
          description: Unauthorized
        400:
          description: Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /user/lock:
    post:
      tags:
      - User
      summary: Lock the application
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    default: Room successfully deleted
        401:
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /user/unlock:
    post:
      tags:
      - User
      summary: Unlock the application
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: boolean
        401:
          description: Unauthorized
  /user/isLocked:
    get:
      tags:
      - User
      summary: Check if application is locked
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                type: boolean
# WebSocket ##################################################################################

# Automations ##############################################
  /websocket/onAutomationCreated:
    get:
      tags:
      - WebSocket
      summary: Websocket event through socket.io
      description: Send the created automation
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutomationPreview'
  /websocket/onAutomationUpdated:
    get:
      tags:
      - WebSocket
      summary: Websocket event through socket.io
      description: Send the updated automation
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutomationPreview'
  /websocket/onAutomationDeleted:
    get:
      tags:
      - WebSocket
      summary: Websocket event through socket.io
      description: Send the id of a deleted automation
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  id:
                    type: string
# DEVICE ##################################################
  /websocket/onDeviceCreated:
    get:
      tags:
      - WebSocket
      summary: Websocket event through socket.io
      description: Send the created device
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'

# Entity ##################################################
  /websocket/onEntityCreated:
    get:
      tags:
      - WebSocket
      summary: Websocket event through socket.io
      description: Send the created entity
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'
  /websocket/onEntityUpdated:
    get:
      tags:
      - WebSocket
      summary: Websocket event through socket.io
      description: Send the updated entity
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Entity'

# Group ###################################################
  /websocket/onGroupCreated:
    get:
      tags:
      - WebSocket
      summary: Websocket event through socket.io
      description: Send the created group
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
  /websocket/onGroupUpdated:
    get:
      tags:
      - WebSocket
      summary: Websocket event through socket.io
      description: Send the updated group
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
  /websocket/onGroupDeleted:
    get:
      tags:
      - WebSocket
      summary: Websocket event through socket.io
      description: Send the deleted group
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  id:
                    type: string
# Room ###################################################
  /websocket/onRoomCreated:
    get:
      tags:
      - WebSocket
      summary: Websocket event through socket.io
      description: Send the created group
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
  /websocket/onRoomUpdated:
    get:
      tags:
      - WebSocket
      summary: Websocket event through socket.io
      description: Send the updated group
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Room'
  /websocket/onRoomDeleted:
    get:
      tags:
      - WebSocket
      summary: Websocket event through socket.io
      description: Send the deleted group
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                properties:
                  id:
                    type: string
components:
  schemas:
    Device:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        model:
          type: string
        nameByUser:
          type: string
          nullable: true
        disableBy:
          type: string
          nullable: true
        areaId:
          type: string
          nullable: true
        entities:
          type: array
          items:
            $ref: '#/components/schemas/Entity'
        automations:
          type: array
          items:
            $ref: '#/components/schemas/Automation'
    Entity:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
        state:
          type: string
        attributes:
          type: array
          items:
            type: object
    User:
      type: object
      properties:
        id:
          type: number
        username:
          type: string
        admin:
          type: boolean
        entities:
          type: array
          items:
            type:
              string
    Room:
      type: object
      properties:
        room_id:
          type: string
        name:
          type: string
        devices:
          type: array
          items:
            $ref: '#/components/schemas/Device'
        automation:
          type: array
          items:
            $ref: '#/components/schemas/Automation'
    Group:
      type: object
      properties:
        group_id:
          type: string
        name:
          type: string
        entities:
          type: array
          items:
            $ref: '#/components/schemas/Entity'
        implicit:
          type: boolean
        state:
          type: string
        room:
          schema:
          $ref: '#/components/schemas/Room'
          nullable: true
        type: 
          type: string
          nullable: true
    Automation:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        state:
          type: string
        trigger:
          type: array
          items:
            type: object
        condition:
          type: array
          items:
            type: object
        action:
          type: array
          items:
            type: object
        mode:
          type: string
    AutomationPreview:
      type: object
      properties:
        id:
          type: string
        name: 
          type: string
        state:
          type: string
    Service:
      type: object
      properties:
        name:
          type: string
          example: 'light.turn_on'
        fields:
          type: array
          items: 
            type: string
            example: 'entity_id'   
